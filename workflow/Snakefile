import pandas as pd
import subprocess

configfile: "../config/config.yaml"

onsuccess:
    print("Workflow finished, no error")

N_VARIANTS = 31654403
THRESHOLD = 5e-02 / N_VARIANTS

# TODO: has to be created with a rule
SNP_TEMPLATE = config["SNP_TEMPLATE"]
GLIST = config["GLIST"]
CORR_TABLE = config["CORR_TABLE"]
PLINK_GENOTYPE = config["PLINK_GENOTYPE"]  # EUR phase 3 1k Genomes from plink2 website
LD_SCORES = config["LD_SCORES"]

THREADS = 1

correspondence_table = pd.read_table(CORR_TABLE)
samples = list(correspondence_table.fg_phenotype)

wildcard_constraints:
    sample = "|".join(samples)


rule all:
    input:
        "../results/fig1.pdf",
        "../results/fig2.pdf",
        "../results/fig3.pdf",
        "../results/Supp1.pdf",
        "../results/Supp2.pdf",
        "../results/Supp3.pdf",
        "../results/Supp4.pdf",
        "../results/Supp5.pdf",
        updated_table="../results/updated_table.tsv",
        phenonames_table="../results/SNP_table.tsv",
        filtered_SNP_table="../results/filtered_SNP_table.tsv",
        nominal_sign_table="../results/nominal_sign_table.tsv",
        total_bed="../results/merged.total.bed",
    output:
        touch(".status")

rule rsid_lookup:
    input:
        SNP_template=SNP_TEMPLATE,
    output:
        rsid_lookup="../results/rsid_lookup.json",
    script:
        "scripts/create_rsid_lookup.py"


rule gather_tables:
    input:
        corr_table=CORR_TABLE,
        filtered_tables=expand("../results/filtered/meta/{sample}_filtered.tsv", sample=samples),
        plink_bed=expand("../results/plink/{dataset}/{sample}_signSNP_clump.bed", dataset=["finn", "ukbb", "meta"], sample=samples)
    output:
        updated_table="../results/updated_table.tsv"
    script:
        "scripts/gather_tables.py"

rule clump_intersection:
    input:
        corr_table=CORR_TABLE,
        plink_bed=expand("../results/plink/{dataset}/{sample}_signSNP_clump.bed", sample=samples, dataset=["finn", "ukbb", "meta"]),
    output:
        clump_intersections="../results/clump_intersection_table.tsv"
    script:
        "scripts/clump_intersection.py"

rule nominal_significance_SNPs:
    input:
        rsid_lookup="../results/rsid_lookup.json",
        SNP_template=SNP_TEMPLATE,
        corr_table=CORR_TABLE,
        filtered_SNP_table="../results/filtered_SNP_table.tsv",
        nominal_filtered_tables=expand("../results/filtered/nominal_{dataset}/{sample}_filtered.tsv", sample=samples, dataset=["finn", "uk"]),
    output:
        nominal_sign_table="../results/nominal_sign_table.tsv"
    script:
        "scripts/gather_nominal_sign_SNPs.py"

rule SNP_table:
    input:
        corr_table=CORR_TABLE,
        ld_scores=LD_SCORES,
        SNP_template=SNP_TEMPLATE,
        rsid_lookup="../results/rsid_lookup.json",
        plink_clumped=expand("../results/plink/{dataset}/{sample}.clumped", dataset=["finn", "ukbb", "meta"], sample=samples),
        filtered_tables=expand("../results/filtered/{dataset}/{sample}_filtered.tsv", sample=samples, dataset=["finn", "uk", "meta"]),
    output:
        phenonames_table="../results/SNP_table.tsv",
        filtered_SNP_table="../results/filtered_SNP_table.tsv",
    script:
        "scripts/gather_SNP_tables.py"

rule analyze_tables:
    input:
        filtered_SNP_table="../results/filtered_SNP_table.tsv",
        nominal_sign_table="../results/nominal_sign_table.tsv",
        updated_table="../results/updated_table.tsv",
        total_bed="../results/merged.total.bed",
        clump_intersections="../results/clump_intersection_table.tsv",
    output:
        "../results/fig1.pdf",
        "../results/fig2.pdf",
        "../results/fig3.pdf",
        "../results/Supp1.pdf",
        "../results/Supp2.pdf",
        "../results/Supp3.pdf",
        "../results/Supp4.pdf",
        "../results/Supp5.pdf",
    conda:
        "envs/r_packages.yaml"
    script:
        "scripts/analysis.R"

include: "rules/plink_clump.smk"
include: "rules/filter_SNPs.smk"
